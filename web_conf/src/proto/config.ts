/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.0
 * source: config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum TriggerType {
    UNSPECIFIED_TRIGGER = 0,
    RAPID_TRIGGER = 1,
    STATIC_TRIGGER = 2
}
export enum ButtonType {
    UNSPECIFIED_BUTTON_TYPE = 0,
    PUSH = 1,
    D_PAD = 2
}
export enum SwitchType {
    UNKNOWN_SWITCH = 0,
    ANALOG_SWITCH = 1,
    DIGITAL_SWITCH = 2
}
export class AnalogSwitchConfig extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        analog_switch_id?: number;
        analog_switch_group_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("analog_switch_id" in data && data.analog_switch_id != undefined) {
                this.analog_switch_id = data.analog_switch_id;
            }
            if ("analog_switch_group_id" in data && data.analog_switch_group_id != undefined) {
                this.analog_switch_group_id = data.analog_switch_group_id;
            }
        }
    }
    get analog_switch_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set analog_switch_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get analog_switch_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set analog_switch_group_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        analog_switch_id?: number;
        analog_switch_group_id?: number;
    }): AnalogSwitchConfig {
        const message = new AnalogSwitchConfig({});
        if (data.analog_switch_id != null) {
            message.analog_switch_id = data.analog_switch_id;
        }
        if (data.analog_switch_group_id != null) {
            message.analog_switch_group_id = data.analog_switch_group_id;
        }
        return message;
    }
    toObject() {
        const data: {
            analog_switch_id?: number;
            analog_switch_group_id?: number;
        } = {};
        if (this.analog_switch_id != null) {
            data.analog_switch_id = this.analog_switch_id;
        }
        if (this.analog_switch_group_id != null) {
            data.analog_switch_group_id = this.analog_switch_group_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.analog_switch_id != 0)
            writer.writeUint32(1, this.analog_switch_id);
        if (this.analog_switch_group_id != 0)
            writer.writeUint32(2, this.analog_switch_group_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnalogSwitchConfig {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnalogSwitchConfig();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.analog_switch_id = reader.readUint32();
                    break;
                case 2:
                    message.analog_switch_group_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AnalogSwitchConfig {
        return AnalogSwitchConfig.deserialize(bytes);
    }
}
export class AnalogSwitchGroup extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        analog_switch_group_id?: number;
        trigger_type?: TriggerType;
        rapid_trigger?: RapidTriggerConfig;
        static_trigger?: StaticTriggerConfig;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("analog_switch_group_id" in data && data.analog_switch_group_id != undefined) {
                this.analog_switch_group_id = data.analog_switch_group_id;
            }
            if ("trigger_type" in data && data.trigger_type != undefined) {
                this.trigger_type = data.trigger_type;
            }
            if ("rapid_trigger" in data && data.rapid_trigger != undefined) {
                this.rapid_trigger = data.rapid_trigger;
            }
            if ("static_trigger" in data && data.static_trigger != undefined) {
                this.static_trigger = data.static_trigger;
            }
        }
    }
    get analog_switch_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set analog_switch_group_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get trigger_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, TriggerType.UNSPECIFIED_TRIGGER) as TriggerType;
    }
    set trigger_type(value: TriggerType) {
        pb_1.Message.setField(this, 2, value);
    }
    get rapid_trigger() {
        return pb_1.Message.getWrapperField(this, RapidTriggerConfig, 3) as RapidTriggerConfig;
    }
    set rapid_trigger(value: RapidTriggerConfig) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_rapid_trigger() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get static_trigger() {
        return pb_1.Message.getWrapperField(this, StaticTriggerConfig, 4) as StaticTriggerConfig;
    }
    set static_trigger(value: StaticTriggerConfig) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_static_trigger() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        analog_switch_group_id?: number;
        trigger_type?: TriggerType;
        rapid_trigger?: ReturnType<typeof RapidTriggerConfig.prototype.toObject>;
        static_trigger?: ReturnType<typeof StaticTriggerConfig.prototype.toObject>;
    }): AnalogSwitchGroup {
        const message = new AnalogSwitchGroup({});
        if (data.analog_switch_group_id != null) {
            message.analog_switch_group_id = data.analog_switch_group_id;
        }
        if (data.trigger_type != null) {
            message.trigger_type = data.trigger_type;
        }
        if (data.rapid_trigger != null) {
            message.rapid_trigger = RapidTriggerConfig.fromObject(data.rapid_trigger);
        }
        if (data.static_trigger != null) {
            message.static_trigger = StaticTriggerConfig.fromObject(data.static_trigger);
        }
        return message;
    }
    toObject() {
        const data: {
            analog_switch_group_id?: number;
            trigger_type?: TriggerType;
            rapid_trigger?: ReturnType<typeof RapidTriggerConfig.prototype.toObject>;
            static_trigger?: ReturnType<typeof StaticTriggerConfig.prototype.toObject>;
        } = {};
        if (this.analog_switch_group_id != null) {
            data.analog_switch_group_id = this.analog_switch_group_id;
        }
        if (this.trigger_type != null) {
            data.trigger_type = this.trigger_type;
        }
        if (this.rapid_trigger != null) {
            data.rapid_trigger = this.rapid_trigger.toObject();
        }
        if (this.static_trigger != null) {
            data.static_trigger = this.static_trigger.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.analog_switch_group_id != 0)
            writer.writeUint32(1, this.analog_switch_group_id);
        if (this.trigger_type != TriggerType.UNSPECIFIED_TRIGGER)
            writer.writeEnum(2, this.trigger_type);
        if (this.has_rapid_trigger)
            writer.writeMessage(3, this.rapid_trigger, () => this.rapid_trigger.serialize(writer));
        if (this.has_static_trigger)
            writer.writeMessage(4, this.static_trigger, () => this.static_trigger.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnalogSwitchGroup {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnalogSwitchGroup();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.analog_switch_group_id = reader.readUint32();
                    break;
                case 2:
                    message.trigger_type = reader.readEnum();
                    break;
                case 3:
                    reader.readMessage(message.rapid_trigger, () => message.rapid_trigger = RapidTriggerConfig.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.static_trigger, () => message.static_trigger = StaticTriggerConfig.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AnalogSwitchGroup {
        return AnalogSwitchGroup.deserialize(bytes);
    }
}
export class RapidTriggerConfig extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        act?: number;
        rel?: number;
        f_act?: number;
        f_rel?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("act" in data && data.act != undefined) {
                this.act = data.act;
            }
            if ("rel" in data && data.rel != undefined) {
                this.rel = data.rel;
            }
            if ("f_act" in data && data.f_act != undefined) {
                this.f_act = data.f_act;
            }
            if ("f_rel" in data && data.f_rel != undefined) {
                this.f_rel = data.f_rel;
            }
        }
    }
    get act() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set act(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get rel() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rel(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get f_act() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set f_act(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get f_rel() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set f_rel(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        act?: number;
        rel?: number;
        f_act?: number;
        f_rel?: number;
    }): RapidTriggerConfig {
        const message = new RapidTriggerConfig({});
        if (data.act != null) {
            message.act = data.act;
        }
        if (data.rel != null) {
            message.rel = data.rel;
        }
        if (data.f_act != null) {
            message.f_act = data.f_act;
        }
        if (data.f_rel != null) {
            message.f_rel = data.f_rel;
        }
        return message;
    }
    toObject() {
        const data: {
            act?: number;
            rel?: number;
            f_act?: number;
            f_rel?: number;
        } = {};
        if (this.act != null) {
            data.act = this.act;
        }
        if (this.rel != null) {
            data.rel = this.rel;
        }
        if (this.f_act != null) {
            data.f_act = this.f_act;
        }
        if (this.f_rel != null) {
            data.f_rel = this.f_rel;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.act != 0)
            writer.writeDouble(1, this.act);
        if (this.rel != 0)
            writer.writeDouble(2, this.rel);
        if (this.f_act != 0)
            writer.writeDouble(3, this.f_act);
        if (this.f_rel != 0)
            writer.writeDouble(4, this.f_rel);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RapidTriggerConfig {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RapidTriggerConfig();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.act = reader.readDouble();
                    break;
                case 2:
                    message.rel = reader.readDouble();
                    break;
                case 3:
                    message.f_act = reader.readDouble();
                    break;
                case 4:
                    message.f_rel = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): RapidTriggerConfig {
        return RapidTriggerConfig.deserialize(bytes);
    }
}
export class StaticTriggerConfig extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        act?: number;
        rel?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("act" in data && data.act != undefined) {
                this.act = data.act;
            }
            if ("rel" in data && data.rel != undefined) {
                this.rel = data.rel;
            }
        }
    }
    get act() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set act(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get rel() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rel(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        act?: number;
        rel?: number;
    }): StaticTriggerConfig {
        const message = new StaticTriggerConfig({});
        if (data.act != null) {
            message.act = data.act;
        }
        if (data.rel != null) {
            message.rel = data.rel;
        }
        return message;
    }
    toObject() {
        const data: {
            act?: number;
            rel?: number;
        } = {};
        if (this.act != null) {
            data.act = this.act;
        }
        if (this.rel != null) {
            data.rel = this.rel;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.act != 0)
            writer.writeDouble(1, this.act);
        if (this.rel != 0)
            writer.writeDouble(2, this.rel);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StaticTriggerConfig {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StaticTriggerConfig();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.act = reader.readDouble();
                    break;
                case 2:
                    message.rel = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): StaticTriggerConfig {
        return StaticTriggerConfig.deserialize(bytes);
    }
}
export class ButtonId extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3]];
    constructor(data?: any[] | ({
        type?: ButtonType;
    } & (({
        push_button?: PushButtonSelector;
        d_pad?: never;
    } | {
        push_button?: never;
        d_pad?: DPadButtonSelector;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("push_button" in data && data.push_button != undefined) {
                this.push_button = data.push_button;
            }
            if ("d_pad" in data && data.d_pad != undefined) {
                this.d_pad = data.d_pad;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, ButtonType.UNSPECIFIED_BUTTON_TYPE) as ButtonType;
    }
    set type(value: ButtonType) {
        pb_1.Message.setField(this, 1, value);
    }
    get push_button() {
        return pb_1.Message.getWrapperField(this, PushButtonSelector, 2) as PushButtonSelector;
    }
    set push_button(value: PushButtonSelector) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_push_button() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get d_pad() {
        return pb_1.Message.getWrapperField(this, DPadButtonSelector, 3) as DPadButtonSelector;
    }
    set d_pad(value: DPadButtonSelector) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_d_pad() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get selector() {
        const cases: {
            [index: number]: "none" | "push_button" | "d_pad";
        } = {
            0: "none",
            2: "push_button",
            3: "d_pad"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
    }
    static fromObject(data: {
        type?: ButtonType;
        push_button?: ReturnType<typeof PushButtonSelector.prototype.toObject>;
        d_pad?: ReturnType<typeof DPadButtonSelector.prototype.toObject>;
    }): ButtonId {
        const message = new ButtonId({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.push_button != null) {
            message.push_button = PushButtonSelector.fromObject(data.push_button);
        }
        if (data.d_pad != null) {
            message.d_pad = DPadButtonSelector.fromObject(data.d_pad);
        }
        return message;
    }
    toObject() {
        const data: {
            type?: ButtonType;
            push_button?: ReturnType<typeof PushButtonSelector.prototype.toObject>;
            d_pad?: ReturnType<typeof DPadButtonSelector.prototype.toObject>;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.push_button != null) {
            data.push_button = this.push_button.toObject();
        }
        if (this.d_pad != null) {
            data.d_pad = this.d_pad.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != ButtonType.UNSPECIFIED_BUTTON_TYPE)
            writer.writeEnum(1, this.type);
        if (this.has_push_button)
            writer.writeMessage(2, this.push_button, () => this.push_button.serialize(writer));
        if (this.has_d_pad)
            writer.writeMessage(3, this.d_pad, () => this.d_pad.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ButtonId {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ButtonId();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    reader.readMessage(message.push_button, () => message.push_button = PushButtonSelector.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.d_pad, () => message.d_pad = DPadButtonSelector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): ButtonId {
        return ButtonId.deserialize(bytes);
    }
}
export class SwitchId extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: SwitchType;
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, SwitchType.UNKNOWN_SWITCH) as SwitchType;
    }
    set type(value: SwitchType) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: SwitchType;
        id?: number;
    }): SwitchId {
        const message = new SwitchId({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: SwitchType;
            id?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != SwitchType.UNKNOWN_SWITCH)
            writer.writeEnum(1, this.type);
        if (this.id != 0)
            writer.writeUint32(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwitchId {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwitchId();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SwitchId {
        return SwitchId.deserialize(bytes);
    }
}
export class PushButtonSelector extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        push_button_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("push_button_id" in data && data.push_button_id != undefined) {
                this.push_button_id = data.push_button_id;
            }
        }
    }
    get push_button_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set push_button_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        push_button_id?: number;
    }): PushButtonSelector {
        const message = new PushButtonSelector({});
        if (data.push_button_id != null) {
            message.push_button_id = data.push_button_id;
        }
        return message;
    }
    toObject() {
        const data: {
            push_button_id?: number;
        } = {};
        if (this.push_button_id != null) {
            data.push_button_id = this.push_button_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.push_button_id != 0)
            writer.writeUint32(1, this.push_button_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushButtonSelector {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushButtonSelector();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.push_button_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): PushButtonSelector {
        return PushButtonSelector.deserialize(bytes);
    }
}
export class DPadButtonSelector extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        direction?: DPadButtonSelector.Direction;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("direction" in data && data.direction != undefined) {
                this.direction = data.direction;
            }
        }
    }
    get direction() {
        return pb_1.Message.getFieldWithDefault(this, 1, DPadButtonSelector.Direction.UNSPECIFIED_DIRECTION) as DPadButtonSelector.Direction;
    }
    set direction(value: DPadButtonSelector.Direction) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        direction?: DPadButtonSelector.Direction;
    }): DPadButtonSelector {
        const message = new DPadButtonSelector({});
        if (data.direction != null) {
            message.direction = data.direction;
        }
        return message;
    }
    toObject() {
        const data: {
            direction?: DPadButtonSelector.Direction;
        } = {};
        if (this.direction != null) {
            data.direction = this.direction;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.direction != DPadButtonSelector.Direction.UNSPECIFIED_DIRECTION)
            writer.writeEnum(1, this.direction);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DPadButtonSelector {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DPadButtonSelector();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.direction = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): DPadButtonSelector {
        return DPadButtonSelector.deserialize(bytes);
    }
}
export namespace DPadButtonSelector {
    export enum Direction {
        UNSPECIFIED_DIRECTION = 0,
        UP = 1,
        DOWN = 2,
        LEFT = 3,
        RIGHT = 4
    }
}
export class ButtonAssignment extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        switch_id?: SwitchId;
        button_id?: ButtonId;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("switch_id" in data && data.switch_id != undefined) {
                this.switch_id = data.switch_id;
            }
            if ("button_id" in data && data.button_id != undefined) {
                this.button_id = data.button_id;
            }
        }
    }
    get switch_id() {
        return pb_1.Message.getWrapperField(this, SwitchId, 1) as SwitchId;
    }
    set switch_id(value: SwitchId) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_switch_id() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get button_id() {
        return pb_1.Message.getWrapperField(this, ButtonId, 2) as ButtonId;
    }
    set button_id(value: ButtonId) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_button_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        switch_id?: ReturnType<typeof SwitchId.prototype.toObject>;
        button_id?: ReturnType<typeof ButtonId.prototype.toObject>;
    }): ButtonAssignment {
        const message = new ButtonAssignment({});
        if (data.switch_id != null) {
            message.switch_id = SwitchId.fromObject(data.switch_id);
        }
        if (data.button_id != null) {
            message.button_id = ButtonId.fromObject(data.button_id);
        }
        return message;
    }
    toObject() {
        const data: {
            switch_id?: ReturnType<typeof SwitchId.prototype.toObject>;
            button_id?: ReturnType<typeof ButtonId.prototype.toObject>;
        } = {};
        if (this.switch_id != null) {
            data.switch_id = this.switch_id.toObject();
        }
        if (this.button_id != null) {
            data.button_id = this.button_id.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_switch_id)
            writer.writeMessage(1, this.switch_id, () => this.switch_id.serialize(writer));
        if (this.has_button_id)
            writer.writeMessage(2, this.button_id, () => this.button_id.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ButtonAssignment {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ButtonAssignment();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.switch_id, () => message.switch_id = SwitchId.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.button_id, () => message.button_id = ButtonId.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): ButtonAssignment {
        return ButtonAssignment.deserialize(bytes);
    }
}
export class BakedData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        board_name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("board_name" in data && data.board_name != undefined) {
                this.board_name = data.board_name;
            }
        }
    }
    get board_name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set board_name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        board_name?: string;
    }): BakedData {
        const message = new BakedData({});
        if (data.board_name != null) {
            message.board_name = data.board_name;
        }
        return message;
    }
    toObject() {
        const data: {
            board_name?: string;
        } = {};
        if (this.board_name != null) {
            data.board_name = this.board_name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.board_name.length)
            writer.writeString(1, this.board_name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BakedData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BakedData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.board_name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): BakedData {
        return BakedData.deserialize(bytes);
    }
}
export class UdongConfig extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        baked?: BakedData;
        analog_switch_configs?: AnalogSwitchConfig[];
        analog_switch_groups?: AnalogSwitchGroup[];
        button_assignments?: ButtonAssignment[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("baked" in data && data.baked != undefined) {
                this.baked = data.baked;
            }
            if ("analog_switch_configs" in data && data.analog_switch_configs != undefined) {
                this.analog_switch_configs = data.analog_switch_configs;
            }
            if ("analog_switch_groups" in data && data.analog_switch_groups != undefined) {
                this.analog_switch_groups = data.analog_switch_groups;
            }
            if ("button_assignments" in data && data.button_assignments != undefined) {
                this.button_assignments = data.button_assignments;
            }
        }
    }
    get baked() {
        return pb_1.Message.getWrapperField(this, BakedData, 4) as BakedData;
    }
    set baked(value: BakedData) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_baked() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get analog_switch_configs() {
        return pb_1.Message.getRepeatedWrapperField(this, AnalogSwitchConfig, 1) as AnalogSwitchConfig[];
    }
    set analog_switch_configs(value: AnalogSwitchConfig[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get analog_switch_groups() {
        return pb_1.Message.getRepeatedWrapperField(this, AnalogSwitchGroup, 2) as AnalogSwitchGroup[];
    }
    set analog_switch_groups(value: AnalogSwitchGroup[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get button_assignments() {
        return pb_1.Message.getRepeatedWrapperField(this, ButtonAssignment, 3) as ButtonAssignment[];
    }
    set button_assignments(value: ButtonAssignment[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        baked?: ReturnType<typeof BakedData.prototype.toObject>;
        analog_switch_configs?: ReturnType<typeof AnalogSwitchConfig.prototype.toObject>[];
        analog_switch_groups?: ReturnType<typeof AnalogSwitchGroup.prototype.toObject>[];
        button_assignments?: ReturnType<typeof ButtonAssignment.prototype.toObject>[];
    }): UdongConfig {
        const message = new UdongConfig({});
        if (data.baked != null) {
            message.baked = BakedData.fromObject(data.baked);
        }
        if (data.analog_switch_configs != null) {
            message.analog_switch_configs = data.analog_switch_configs.map(item => AnalogSwitchConfig.fromObject(item));
        }
        if (data.analog_switch_groups != null) {
            message.analog_switch_groups = data.analog_switch_groups.map(item => AnalogSwitchGroup.fromObject(item));
        }
        if (data.button_assignments != null) {
            message.button_assignments = data.button_assignments.map(item => ButtonAssignment.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            baked?: ReturnType<typeof BakedData.prototype.toObject>;
            analog_switch_configs?: ReturnType<typeof AnalogSwitchConfig.prototype.toObject>[];
            analog_switch_groups?: ReturnType<typeof AnalogSwitchGroup.prototype.toObject>[];
            button_assignments?: ReturnType<typeof ButtonAssignment.prototype.toObject>[];
        } = {};
        if (this.baked != null) {
            data.baked = this.baked.toObject();
        }
        if (this.analog_switch_configs != null) {
            data.analog_switch_configs = this.analog_switch_configs.map((item: AnalogSwitchConfig) => item.toObject());
        }
        if (this.analog_switch_groups != null) {
            data.analog_switch_groups = this.analog_switch_groups.map((item: AnalogSwitchGroup) => item.toObject());
        }
        if (this.button_assignments != null) {
            data.button_assignments = this.button_assignments.map((item: ButtonAssignment) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_baked)
            writer.writeMessage(4, this.baked, () => this.baked.serialize(writer));
        if (this.analog_switch_configs.length)
            writer.writeRepeatedMessage(1, this.analog_switch_configs, (item: AnalogSwitchConfig) => item.serialize(writer));
        if (this.analog_switch_groups.length)
            writer.writeRepeatedMessage(2, this.analog_switch_groups, (item: AnalogSwitchGroup) => item.serialize(writer));
        if (this.button_assignments.length)
            writer.writeRepeatedMessage(3, this.button_assignments, (item: ButtonAssignment) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UdongConfig {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UdongConfig();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    reader.readMessage(message.baked, () => message.baked = BakedData.deserialize(reader));
                    break;
                case 1:
                    reader.readMessage(message.analog_switch_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AnalogSwitchConfig.deserialize(reader), AnalogSwitchConfig));
                    break;
                case 2:
                    reader.readMessage(message.analog_switch_groups, () => pb_1.Message.addToRepeatedWrapperField(message, 2, AnalogSwitchGroup.deserialize(reader), AnalogSwitchGroup));
                    break;
                case 3:
                    reader.readMessage(message.button_assignments, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ButtonAssignment.deserialize(reader), ButtonAssignment));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): UdongConfig {
        return UdongConfig.deserialize(bytes);
    }
}
