/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_CONFIG_PB_H_INCLUDED
#define PB_CONFIG_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _TriggerType {
    TriggerType_RAPID_TRIGGER = 0,
    TriggerType_STATIC_TRIGGER = 1
} TriggerType;

typedef enum _ButtonType {
    ButtonType_PUSH = 0,
    ButtonType_D_PAD = 1
} ButtonType;

typedef enum _DPadButtonSelector_Direction {
    DPadButtonSelector_Direction_UP = 0,
    DPadButtonSelector_Direction_DOWN = 1,
    DPadButtonSelector_Direction_LEFT = 2,
    DPadButtonSelector_Direction_RIGHT = 3
} DPadButtonSelector_Direction;

/* Struct definitions */
/* Represents the overall configuration for Udong */
typedef struct _UdongConfig {
    pb_callback_t analog_switch_assignments;
    pb_callback_t analog_switch_groups;
    pb_callback_t button_assignments;
} UdongConfig;

/* Maps an analog switch to a group
 Switches in the same group share the same configuration */
typedef struct _AnalogSwitchAssignment {
    uint32_t analog_switch_id;
    uint32_t analog_switch_group_id;
} AnalogSwitchAssignment;

/* Represents a rapid trigger configuration */
typedef struct _RapidTrigger {
    float act;
    float rel;
    float f_act;
    float f_rel;
} RapidTrigger;

/* Represents a static trigger configuration */
typedef struct _StaticTrigger {
    float act;
    float rel;
} StaticTrigger;

/* Configurations for a group of analog switches */
typedef struct _AnalogSwitchGroup {
    uint32_t analog_switch_group_id;
    TriggerType trigger_type;
    /* Do NOT use oneof here so that we can keep the configuration for both trigger types */
    bool has_rapid_trigger;
    RapidTrigger rapid_trigger;
    bool has_static_trigger;
    StaticTrigger static_trigger;
} AnalogSwitchGroup;

/* An ID for push buttons */
typedef struct _PushButtonSelector {
    uint32_t push_button_id;
} PushButtonSelector;

/* An ID for D-pad buttons */
typedef struct _DPadButtonSelector {
    DPadButtonSelector_Direction direction;
} DPadButtonSelector;

/* A button ID used to identify a button on the USB gamepad */
typedef struct _ButtonId {
    ButtonType type;
    pb_size_t which_selector;
    union {
        PushButtonSelector push_button;
        DPadButtonSelector d_pad;
    } selector;
} ButtonId;

/* Maps a switch to a button */
typedef struct _ButtonAssignment {
    uint32_t switch_id;
    bool has_button_id;
    ButtonId button_id;
} ButtonAssignment;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _TriggerType_MIN TriggerType_RAPID_TRIGGER
#define _TriggerType_MAX TriggerType_STATIC_TRIGGER
#define _TriggerType_ARRAYSIZE ((TriggerType)(TriggerType_STATIC_TRIGGER+1))

#define _ButtonType_MIN ButtonType_PUSH
#define _ButtonType_MAX ButtonType_D_PAD
#define _ButtonType_ARRAYSIZE ((ButtonType)(ButtonType_D_PAD+1))

#define _DPadButtonSelector_Direction_MIN DPadButtonSelector_Direction_UP
#define _DPadButtonSelector_Direction_MAX DPadButtonSelector_Direction_RIGHT
#define _DPadButtonSelector_Direction_ARRAYSIZE ((DPadButtonSelector_Direction)(DPadButtonSelector_Direction_RIGHT+1))



#define AnalogSwitchGroup_trigger_type_ENUMTYPE TriggerType



#define ButtonId_type_ENUMTYPE ButtonType


#define DPadButtonSelector_direction_ENUMTYPE DPadButtonSelector_Direction



/* Initializer values for message structs */
#define UdongConfig_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define AnalogSwitchAssignment_init_default      {0, 0}
#define AnalogSwitchGroup_init_default           {0, _TriggerType_MIN, false, RapidTrigger_init_default, false, StaticTrigger_init_default}
#define RapidTrigger_init_default                {0, 0, 0, 0}
#define StaticTrigger_init_default               {0, 0}
#define ButtonId_init_default                    {_ButtonType_MIN, 0, {PushButtonSelector_init_default}}
#define PushButtonSelector_init_default          {0}
#define DPadButtonSelector_init_default          {_DPadButtonSelector_Direction_MIN}
#define ButtonAssignment_init_default            {0, false, ButtonId_init_default}
#define UdongConfig_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define AnalogSwitchAssignment_init_zero         {0, 0}
#define AnalogSwitchGroup_init_zero              {0, _TriggerType_MIN, false, RapidTrigger_init_zero, false, StaticTrigger_init_zero}
#define RapidTrigger_init_zero                   {0, 0, 0, 0}
#define StaticTrigger_init_zero                  {0, 0}
#define ButtonId_init_zero                       {_ButtonType_MIN, 0, {PushButtonSelector_init_zero}}
#define PushButtonSelector_init_zero             {0}
#define DPadButtonSelector_init_zero             {_DPadButtonSelector_Direction_MIN}
#define ButtonAssignment_init_zero               {0, false, ButtonId_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define UdongConfig_analog_switch_assignments_tag 1
#define UdongConfig_analog_switch_groups_tag     2
#define UdongConfig_button_assignments_tag       3
#define AnalogSwitchAssignment_analog_switch_id_tag 1
#define AnalogSwitchAssignment_analog_switch_group_id_tag 2
#define RapidTrigger_act_tag                     1
#define RapidTrigger_rel_tag                     2
#define RapidTrigger_f_act_tag                   3
#define RapidTrigger_f_rel_tag                   4
#define StaticTrigger_act_tag                    1
#define StaticTrigger_rel_tag                    2
#define AnalogSwitchGroup_analog_switch_group_id_tag 1
#define AnalogSwitchGroup_trigger_type_tag       2
#define AnalogSwitchGroup_rapid_trigger_tag      3
#define AnalogSwitchGroup_static_trigger_tag     4
#define PushButtonSelector_push_button_id_tag    1
#define DPadButtonSelector_direction_tag         1
#define ButtonId_type_tag                        1
#define ButtonId_push_button_tag                 2
#define ButtonId_d_pad_tag                       3
#define ButtonAssignment_switch_id_tag           1
#define ButtonAssignment_button_id_tag           2

/* Struct field encoding specification for nanopb */
#define UdongConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  analog_switch_assignments,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  analog_switch_groups,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  button_assignments,   3)
#define UdongConfig_CALLBACK pb_default_field_callback
#define UdongConfig_DEFAULT NULL
#define UdongConfig_analog_switch_assignments_MSGTYPE AnalogSwitchAssignment
#define UdongConfig_analog_switch_groups_MSGTYPE AnalogSwitchGroup
#define UdongConfig_button_assignments_MSGTYPE ButtonAssignment

#define AnalogSwitchAssignment_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   analog_switch_id,   1) \
X(a, STATIC,   SINGULAR, UINT32,   analog_switch_group_id,   2)
#define AnalogSwitchAssignment_CALLBACK NULL
#define AnalogSwitchAssignment_DEFAULT NULL

#define AnalogSwitchGroup_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   analog_switch_group_id,   1) \
X(a, STATIC,   SINGULAR, UENUM,    trigger_type,      2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rapid_trigger,     3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  static_trigger,    4)
#define AnalogSwitchGroup_CALLBACK NULL
#define AnalogSwitchGroup_DEFAULT NULL
#define AnalogSwitchGroup_rapid_trigger_MSGTYPE RapidTrigger
#define AnalogSwitchGroup_static_trigger_MSGTYPE StaticTrigger

#define RapidTrigger_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    act,               1) \
X(a, STATIC,   SINGULAR, FLOAT,    rel,               2) \
X(a, STATIC,   SINGULAR, FLOAT,    f_act,             3) \
X(a, STATIC,   SINGULAR, FLOAT,    f_rel,             4)
#define RapidTrigger_CALLBACK NULL
#define RapidTrigger_DEFAULT NULL

#define StaticTrigger_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    act,               1) \
X(a, STATIC,   SINGULAR, FLOAT,    rel,               2)
#define StaticTrigger_CALLBACK NULL
#define StaticTrigger_DEFAULT NULL

#define ButtonId_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (selector,push_button,selector.push_button),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (selector,d_pad,selector.d_pad),   3)
#define ButtonId_CALLBACK NULL
#define ButtonId_DEFAULT NULL
#define ButtonId_selector_push_button_MSGTYPE PushButtonSelector
#define ButtonId_selector_d_pad_MSGTYPE DPadButtonSelector

#define PushButtonSelector_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   push_button_id,    1)
#define PushButtonSelector_CALLBACK NULL
#define PushButtonSelector_DEFAULT NULL

#define DPadButtonSelector_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    direction,         1)
#define DPadButtonSelector_CALLBACK NULL
#define DPadButtonSelector_DEFAULT NULL

#define ButtonAssignment_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   switch_id,         1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  button_id,         2)
#define ButtonAssignment_CALLBACK NULL
#define ButtonAssignment_DEFAULT NULL
#define ButtonAssignment_button_id_MSGTYPE ButtonId

extern const pb_msgdesc_t UdongConfig_msg;
extern const pb_msgdesc_t AnalogSwitchAssignment_msg;
extern const pb_msgdesc_t AnalogSwitchGroup_msg;
extern const pb_msgdesc_t RapidTrigger_msg;
extern const pb_msgdesc_t StaticTrigger_msg;
extern const pb_msgdesc_t ButtonId_msg;
extern const pb_msgdesc_t PushButtonSelector_msg;
extern const pb_msgdesc_t DPadButtonSelector_msg;
extern const pb_msgdesc_t ButtonAssignment_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define UdongConfig_fields &UdongConfig_msg
#define AnalogSwitchAssignment_fields &AnalogSwitchAssignment_msg
#define AnalogSwitchGroup_fields &AnalogSwitchGroup_msg
#define RapidTrigger_fields &RapidTrigger_msg
#define StaticTrigger_fields &StaticTrigger_msg
#define ButtonId_fields &ButtonId_msg
#define PushButtonSelector_fields &PushButtonSelector_msg
#define DPadButtonSelector_fields &DPadButtonSelector_msg
#define ButtonAssignment_fields &ButtonAssignment_msg

/* Maximum encoded size of messages (where known) */
/* UdongConfig_size depends on runtime parameters */
#define AnalogSwitchAssignment_size              12
#define AnalogSwitchGroup_size                   42
#define ButtonAssignment_size                    18
#define ButtonId_size                            10
#define CONFIG_PB_H_MAX_SIZE                     AnalogSwitchGroup_size
#define DPadButtonSelector_size                  2
#define PushButtonSelector_size                  6
#define RapidTrigger_size                        20
#define StaticTrigger_size                       10

#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef __cplusplus
/* Message descriptors for nanopb */
namespace nanopb {
template <>
struct MessageDescriptor<UdongConfig> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 3;
    static inline const pb_msgdesc_t* fields() {
        return &UdongConfig_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<AnalogSwitchAssignment> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 2;
    static PB_INLINE_CONSTEXPR const pb_size_t size = AnalogSwitchAssignment_size;
    static inline const pb_msgdesc_t* fields() {
        return &AnalogSwitchAssignment_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<AnalogSwitchGroup> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 4;
    static PB_INLINE_CONSTEXPR const pb_size_t size = AnalogSwitchGroup_size;
    static inline const pb_msgdesc_t* fields() {
        return &AnalogSwitchGroup_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<RapidTrigger> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 4;
    static PB_INLINE_CONSTEXPR const pb_size_t size = RapidTrigger_size;
    static inline const pb_msgdesc_t* fields() {
        return &RapidTrigger_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<StaticTrigger> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 2;
    static PB_INLINE_CONSTEXPR const pb_size_t size = StaticTrigger_size;
    static inline const pb_msgdesc_t* fields() {
        return &StaticTrigger_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<ButtonId> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 3;
    static PB_INLINE_CONSTEXPR const pb_size_t size = ButtonId_size;
    static inline const pb_msgdesc_t* fields() {
        return &ButtonId_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<PushButtonSelector> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static PB_INLINE_CONSTEXPR const pb_size_t size = PushButtonSelector_size;
    static inline const pb_msgdesc_t* fields() {
        return &PushButtonSelector_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<DPadButtonSelector> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static PB_INLINE_CONSTEXPR const pb_size_t size = DPadButtonSelector_size;
    static inline const pb_msgdesc_t* fields() {
        return &DPadButtonSelector_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
template <>
struct MessageDescriptor<ButtonAssignment> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 2;
    static PB_INLINE_CONSTEXPR const pb_size_t size = ButtonAssignment_size;
    static inline const pb_msgdesc_t* fields() {
        return &ButtonAssignment_msg;
    }
    static inline bool has_msgid() {
        return false;
    }
    static inline uint32_t msgid() {
        return 0;
    }
};
}  // namespace nanopb

#endif  /* __cplusplus */


#endif
